 // https://leetcode.com/problems/copy-list-with-random-pointer/
// In O(1) space.
#include<bits/stdc++.h>
using namespace std;

class Node{
  public:
   int data;
   Node *next;
   Node *random;
};
Node *head;
Node* getdata(Node **h, int data){
  Node *temp = new Node();
  temp->data = data;
  temp->next = NULL;
  temp->random = NULL;
  Node *t = *h;
  if(*h == NULL){
    *h = temp;
     t = temp;
  }
  else {
    while(t!=NULL){
      if(t->next == NULL){
        t->next = temp;
        t = t->next;
      }
      t = t->next;
    }
  }
  return *h;
}
void display(Node *x){
  if(x == NULL){
    cout << "List is empty" << endl;
  }
  Node *p = x;
  while(p != NULL){
    cout << "Data = " << p->data << ", Random = " << p->random->data << endl;
    /*cout << p->data << endl;*/
    p = p->next;
  }
}
Node *getNode(int val){
  Node *newnode = new Node;
  newnode->data = val;
  newnode->next = NULL;
  newnode->random = NULL;
  return newnode;
}
Node *copyList(Node *head){
  if(head == NULL) return NULL;
  Node *curr = head, *temp;
  while(curr != NULL){ // create a copy of node1 and insert it in between node1 and node 2.
    temp = curr->next; 
    curr->next = getNode(curr->data);
    curr->next->next = temp;
    curr =temp; 
  }
  curr = head;
  while(curr != NULL){
    if(curr->random != NULL){
      curr->next->random = curr->random->next;
    }
    curr = curr->next->next;
  }
  Node *c = head, *copy_h = head->next;
  while(c != NULL){
    Node *next = c->next->next;
    Node *copy = c->next;
    c->next = next;
    if(next != NULL){
      copy->next = next->next;
    }
    c= next;
  }
  return copy_h;
}
int main(){
  int n, data;
  cin >> n;
  for(int i = 0; i<n; i++){
    cin >> data;
    getdata(&head, data);
  }
  head->random = head;
  head->next->random = head;
  head->next->next->random = head->next->next->next->next;
  head->next->next->next->random = head->next->next;
  head->next->next->next->next->random = head;

  display(head);
  Node* clone = copyList(head);
  display(clone);
}
