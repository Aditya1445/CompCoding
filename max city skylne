// https://leetcode.com/problems/max-increase-to-keep-city-skyline/
// Logic : The grid[i][j] itself cannot be greater than maximum of its respective rows and coloumns. so res will be min(row[i], col[j]) - grid[i][j].
// First loop will calculate the maximum in rows and maximum in columns. 
// Second loop will calculate the height of every required building . 
#include<bits/stdc++.h>
using namespace std;

int maxIncrease(vector<vector<int>>& grid){
   int n = grid.size();
   vector<int> row(n,0), col(n,0);
   for(int i = 0; i<n; i++){
     for(int j = 0; j<n; j++){
       row[i] = max(row[i], grid[i][j]);
       col[j] = max(col[j], grid[i][j]);
     }
   }
   int res = 0;
   for(int i = 0; i<n; i++){
     for(int j = 0; j<n; j++){
       res += min(row[i], col[j]) - grid[i][j];
     }
   }
   return res;
}
int main(){
  int n, data;
  cin >> n;
  vector<vector<int>> grid;
  for(int i = 0; i<n; i++){
      vector<int> vec;
      for(int j = 0; j<n; j++){
        cin >> data;
        vec.push_back(data);
      }
      grid.push_back(vec);
  }
  /*for(auto x : grid){
    for(auto i : x){
      cout <<i << " ";
    }
    cout << endl;
  }*/
  int maxheight = maxIncrease(grid);
  cout << maxheight << endl;
}
