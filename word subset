// https://leetcode.com/problems/word-subsets/
#include<bits/stdc++.h>
using namespace std;
vector<int> getCharfreq(string& s){
  vector<int> result(26);
  for(char c : s){
    result[c - 'a']++;
  }
  return result;
}
vector<string> wordSubsets(vector<string>& A, vector<string>& B){
  vector<string> res;
  vector<int> max_b_count(26), char_freq;
  for(int i = 0; i<B.size(); i++){
    char_freq = getCharfreq(B[i]);
    for(int j = 0; j<26; j++){
      max_b_count[j] = max(max_b_count[j], char_freq[j]); //store the maximum count of each character in vector string B
    } 
  }
  vector<int> count;
  for(int i = 0; i<A.size(); i++){
    count = getCharfreq(A[i]); // count the frequency of each character of a string from vector string A
    bool isvalid = true;
    for(int j = 0; j<26; j++){
      if(max_b_count[j] > count[j]){ // if the required occurence of each character in B is greater than available freq of A then break the loop 
        isvalid = false;
        break;
      }
    }
    if(isvalid){res.push_back(A[i]);}
  }
  return res;
}
int main(){
  int n, m;
  cin >> n >> m;
  string s;
  vector<string> A;
  for(int i = 0; i<n; i++){
    cin >> s;
    A.push_back(s);
  }
  vector<string> B;
  for(int i = 0; i<m; i++){
    cin >> s;
    B.push_back(s);
  }
  vector<string> output = wordSubsets(A, B);
  for(auto i : output){
    cout << i << " ";
  }
}
