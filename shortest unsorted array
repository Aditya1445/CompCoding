// https://leetcode.com/explore/challenge/card/february-leetcoding-challenge-2021/587/week-4-february-22nd-february-28th/3652/
#include<bits/stdc++.h>
using namespace std;

int findUnsortedArray(vector<int>& nums){
  /*int start = 0, end = nums.size()-1;
  int i, min, max;
  for(start = 0; start < nums.size(); start++){
    if(nums[start] > nums[start+1])
    {
      break;
    }
  } 
  for(end = nums.size() - 1; end >= 0; end--){
    if(nums[end] < nums[end-1]){
      break;
    }
  }
  if(start == nums.size() - 1){
    return 0;
  }
  min = nums[start], max = nums[start];
  for(i = start + 1; i<=end; i++){
    if(nums[i] < min){
      min = nums[i];
    }
    if(nums[i] > max){
      max = nums[i];
    }
  }
  for(int i = 0; i<start - 1; i++){
    if(nums[i] > min){
      start = i;
      break;
    }
  }
  for(int i = end+1; i<nums.size()-1; i++){
    if(nums[i] < max){
      end = i;
      break;
    }
  }
  return end-start+1;*/
  int n = nums.size();
  vector<int> vec(nums);
  sort(vec.begin(), vec.end());
  int i = 0, j = n - 1;
  while(i < n && nums[i] == vec[i]){
    i++;
  }
  while(j > i && nums[j] == vec[j]){
    j--;
  }
  return j-i+1;
}
int main(){
  int n, data;
  cin >> n;
  vector<int> nums;
  for(int i = 0; i<n; i++){
    cin >> data;
    nums.push_back(data);
  }
  int length = findUnsortedArray(nums);
  cout << length;
}
